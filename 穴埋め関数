{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOMZ25ElSN8swaIQrnWugOV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tatsuro-Chiba/covid19/blob/master/%E7%A9%B4%E5%9F%8B%E3%82%81%E9%96%A2%E6%95%B0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DGhoQ2aGzk37",
        "outputId": "8bc2ab5c-8758-4fe6-8517-1f24d6f934cc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:rasterio._env:CPLE_AppDefined in The definition of projected CRS EPSG:4326 got from GeoTIFF keys is not the same as the one from the EPSG registry, which may cause issues during reprojection operations. Set GTIFF_SRS_SOURCE configuration option to EPSG to use official parameters (overriding the ones from GeoTIFF keys), or to GEOKEYS to use custom values from GeoTIFF keys and drop the EPSG code.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloaded downloaded_data/saga-2024.tif\n",
            "File downloaded_data/saga-2024.tif processed successfully and saved as processed_data/saga-2024_092812_20240805.tif\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "import rasterio\n",
        "import numpy as np\n",
        "import datetime\n",
        "import pytz\n",
        "import os\n",
        "from scipy.ndimage import binary_dilation\n",
        "\n",
        "def download_file(url, dest_path):\n",
        "    response = requests.get(url)\n",
        "    response.raise_for_status()  # Ensure we notice bad responses\n",
        "    with open(dest_path, 'wb') as file:\n",
        "        file.write(response.content)\n",
        "    print(f\"Downloaded {dest_path}\")\n",
        "\n",
        "def fill_holes_simple(data, expansion_size, focus_distance):\n",
        "    mask = np.isnan(data)\n",
        "    filled_data = data.copy()\n",
        "\n",
        "    while np.isnan(filled_data).any():\n",
        "        dilated_mask = binary_dilation(mask, structure=np.ones((expansion_size, expansion_size)))\n",
        "        border_mask = dilated_mask & ~mask\n",
        "\n",
        "        if not border_mask.any():\n",
        "            break\n",
        "\n",
        "        # 各NaN値に対してその周囲の最小値を計算\n",
        "        for i in range(data.shape[0]):\n",
        "            for j in range(data.shape[1]):\n",
        "                if mask[i, j]:\n",
        "                    neighborhood = filled_data[max(0, i-focus_distance):min(data.shape[0], i+focus_distance+1),\n",
        "                                               max(0, j-focus_distance):min(data.shape[1], j+focus_distance+1)]\n",
        "                    min_value = np.nanmin(neighborhood)\n",
        "                    if np.isnan(min_value):\n",
        "                        continue  # 全部NaNなら飛ばす\n",
        "                    filled_data[i, j] = min_value\n",
        "\n",
        "        mask = np.isnan(filled_data)\n",
        "        if not mask.any():\n",
        "            break\n",
        "\n",
        "    return filled_data\n",
        "\n",
        "# 穴埋め対象の定義\n",
        "nan_height = -50\n",
        "expansion_size = 2\n",
        "focus_distance = 50\n",
        "sea_level = -5\n",
        "\n",
        "# URLからファイルをダウンロード\n",
        "url = 'https://paspro.com/bousai/kazan/_/bbs/?file_id=MV8wMDA4NTA%3D&name=2.tif'\n",
        "download_dir = 'downloaded_data'\n",
        "os.makedirs(download_dir, exist_ok=True)\n",
        "file_path = os.path.join(download_dir, 'saga-2024.tif')\n",
        "\n",
        "download_file(url, file_path)\n",
        "\n",
        "# ダウンロードしたファイルを読み込み\n",
        "with rasterio.open(file_path) as src:\n",
        "    data = src.read(1)\n",
        "    meta = src.meta\n",
        "\n",
        "# NaN値で置き換え\n",
        "data[data < nan_height] = np.nan\n",
        "original_data = data.copy()\n",
        "\n",
        "# 簡易な穴埋め関数を呼び出し\n",
        "filled_data = fill_holes_simple(data, expansion_size, focus_distance)\n",
        "\n",
        "# 出力ファイルの設定\n",
        "output_file_format = \"{original_name}_{timestamp}.tif\"\n",
        "original_file_name = os.path.splitext(os.path.basename(file_path))[0]\n",
        "\n",
        "jst = pytz.timezone('Asia/Tokyo')\n",
        "now = datetime.datetime.now(jst)\n",
        "timestamp = now.strftime(\"%H%M%S_%Y%m%d\")\n",
        "\n",
        "output_dir = 'processed_data'\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "output_file = os.path.join(output_dir, output_file_format.format(original_name=original_file_name, timestamp=timestamp))\n",
        "\n",
        "# 新しいGeoTIFFファイルに書き込み\n",
        "with rasterio.open(output_file, 'w', **meta) as dst:\n",
        "    dst.write(filled_data, 1)\n",
        "\n",
        "print(f\"File {file_path} processed successfully and saved as {output_file}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import rasterio\n",
        "import numpy as np\n",
        "import datetime\n",
        "import pytz\n",
        "import os\n",
        "from scipy.ndimage import binary_dilation\n",
        "import zipfile\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def download_file(url, dest_path):\n",
        "    response = requests.get(url)\n",
        "    response.raise_for_status()  # Ensure we notice bad responses\n",
        "    with open(dest_path, 'wb') as file:\n",
        "        file.write(response.content)\n",
        "    print(f\"Downloaded {dest_path}\")\n",
        "\n",
        "def extract_zip(zip_path, extract_to):\n",
        "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "        zip_ref.extractall(extract_to)\n",
        "    print(f\"Extracted {zip_path} to {extract_to}\")\n",
        "\n",
        "def fill_holes_simple(data, expansion_size, focus_distance):\n",
        "    mask = np.isnan(data)\n",
        "    filled_data = data.copy()\n",
        "\n",
        "    while np.isnan(filled_data).any():\n",
        "        dilated_mask = binary_dilation(mask, structure=np.ones((expansion_size, expansion_size)))\n",
        "        border_mask = dilated_mask & ~mask\n",
        "\n",
        "        if not border_mask.any():\n",
        "            break\n",
        "\n",
        "        for i in range(data.shape[0]):\n",
        "            for j in range(data.shape[1]):\n",
        "                if mask[i, j]:\n",
        "                    neighborhood = filled_data[max(0, i-focus_distance):min(data.shape[0], i+focus_distance+1),\n",
        "                                               max(0, j-focus_distance):min(data.shape[1], j+focus_distance+1)]\n",
        "                    min_value = np.nanmin(neighborhood)\n",
        "                    if np.isnan(min_value):\n",
        "                        continue\n",
        "                    filled_data[i, j] = min_value\n",
        "\n",
        "        mask = np.isnan(filled_data)\n",
        "        if not mask.any():\n",
        "            break\n",
        "\n",
        "    return filled_data\n",
        "\n",
        "def zip_files(zip_filename, files):\n",
        "    with zipfile.ZipFile(zip_filename, 'w') as zipf:\n",
        "        for file in files:\n",
        "            zipf.write(file, os.path.basename(file))\n",
        "    print(f\"Created ZIP file: {zip_filename}\")\n",
        "\n",
        "def save_image(data, filename):\n",
        "    plt.figure(figsize=(10, 10))\n",
        "    plt.imshow(data, cmap='viridis')\n",
        "    plt.colorbar()\n",
        "    plt.savefig(filename)\n",
        "    plt.close()\n",
        "\n",
        "# 穴埋め対象の定義\n",
        "nan_height = -50\n",
        "expansion_size = 2\n",
        "focus_distance = 50\n",
        "sea_level = 0.1\n",
        "\n",
        "# ZIPファイルのURLと解凍先の設定\n",
        "url = 'https://paspro.com/bousai/kazan/_/bbs/?file_id=MV8wMDA4NDk%3D&name=232.zip'  # ここにZIPファイルのURLを指定\n",
        "download_dir = 'downloaded_data'\n",
        "os.makedirs(download_dir, exist_ok=True)\n",
        "zip_path = os.path.join(download_dir, 'data.zip')\n",
        "\n",
        "# ZIPファイルをダウンロード\n",
        "download_file(url, zip_path)\n",
        "\n",
        "# ZIPファイルを解凍\n",
        "extract_to = os.path.join(download_dir, 'extracted')\n",
        "os.makedirs(extract_to, exist_ok=True)\n",
        "extract_zip(zip_path, extract_to)\n",
        "\n",
        "# 処理済みファイルと画像を保存するリスト\n",
        "processed_files = []\n",
        "image_files = []\n",
        "\n",
        "# 解凍されたTIFFファイルに対して処理を実行\n",
        "for root, dirs, files in os.walk(extract_to):\n",
        "    for file in files:\n",
        "        if file.endswith('.tif'):\n",
        "            try:\n",
        "                file_path = os.path.join(root, file)\n",
        "\n",
        "                # ファイルサイズを表示\n",
        "                file_size = os.path.getsize(file_path)\n",
        "                print(f\"Processing file: {file_path}\")\n",
        "                print(f\"File size: {file_size} bytes\")\n",
        "\n",
        "                # ダウンロードしたファイルを読み込み\n",
        "                with rasterio.open(file_path) as src:\n",
        "                    data = src.read(1)\n",
        "                    meta = src.meta\n",
        "                    width, height = src.width, src.height\n",
        "                    print(f\"File dimensions: width={width}, height={height}\")\n",
        "\n",
        "                # NaN値で置き換え\n",
        "                data[data < nan_height] = np.nan\n",
        "                original_data = data.copy()\n",
        "\n",
        "                # 処理前の画像を保存\n",
        "                pre_image_path = os.path.join(download_dir, f\"pre_{os.path.splitext(file)[0]}.png\")\n",
        "                save_image(original_data, pre_image_path)\n",
        "                image_files.append(pre_image_path)\n",
        "\n",
        "                # 簡易な穴埋め関数を呼び出し\n",
        "                filled_data = fill_holes_simple(data, expansion_size, focus_distance)\n",
        "\n",
        "                # 処理後の画像を保存\n",
        "                post_image_path = os.path.join(download_dir, f\"post_{os.path.splitext(file)[0]}.png\")\n",
        "                save_image(filled_data, post_image_path)\n",
        "                image_files.append(post_image_path)\n",
        "\n",
        "                print(f\"Filled data stats: min={np.nanmin(filled_data)}, max={np.nanmax(filled_data)}, mean={np.nanmean(filled_data)}\")\n",
        "\n",
        "                # 出力ファイルの設定\n",
        "                output_file_format = \"{original_name}_{timestamp}.tif\"\n",
        "                original_file_name = os.path.splitext(os.path.basename(file_path))[0]\n",
        "\n",
        "                jst = pytz.timezone('Asia/Tokyo')\n",
        "                now = datetime.datetime.now(jst)\n",
        "                timestamp = now.strftime(\"%H%M%S_%Y%m%d\")\n",
        "\n",
        "                output_dir = 'processed_data'\n",
        "                os.makedirs(output_dir, exist_ok=True)\n",
        "                output_file = os.path.join(output_dir, output_file_format.format(original_name=original_file_name, timestamp=timestamp))\n",
        "\n",
        "                # 新しいGeoTIFFファイルに書き込み\n",
        "                with rasterio.open(output_file, 'w', **meta) as dst:\n",
        "                    dst.write(filled_data, 1)\n",
        "\n",
        "                print(f\"File {file_path} processed successfully and saved as {output_file}\")\n",
        "                processed_files.append(output_file)\n",
        "            except Exception as e:\n",
        "                print(f\"Error processing file {file_path}: {e}\")\n",
        "\n",
        "# すべての処理済みファイルと画像をZIP圧縮\n",
        "zip_filename = os.path.join(download_dir, f\"processed_files_{timestamp}.zip\")\n",
        "zip_files(zip_filename, processed_files + image_files)\n",
        "\n",
        "print(f\"All files processed and saved in {zip_filename}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UXKyFA4GpOQU",
        "outputId": "9ac0df1a-2a4f-4a73-ccf9-49892f8f596b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloaded downloaded_data/data.zip\n",
            "Extracted downloaded_data/data.zip to downloaded_data/extracted\n",
            "Created ZIP file: downloaded_data/processed_files_020824_20240805.zip\n",
            "All files processed and saved in downloaded_data/processed_files_020824_20240805.zip\n"
          ]
        }
      ]
    }
  ]
}